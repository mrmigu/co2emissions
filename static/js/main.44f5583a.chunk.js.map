{"version":3,"sources":["constants.js","reducers/yearReducer.js","reducers/co2MapDataReducer.js","reducers/tooltipReducer.js","reducers/index.js","components/AppTitle.js","components/YearSlider.js","actions/index.js","components/WorldMap.js","components/Tooltip.js","components/App.js","index.js"],"names":["constants","WORLD_ISO","START_YEAR","END_YEAR","yearReducer","selectedYear","action","type","payload","co2MapDataReducer","existingCo2Data","co2Data","Object","keys","owidCo2Data","map","country","countryData","transformedCountryData","name","iso_code","data","forEach","yearlyData","year","co2","tooltipReducer","tooltipContent","combineReducers","connect","state","props","changeYear","muiTheme","createTheme","overrides","MuiSlider","thumb","color","track","rail","Grid","container","spacing","justifyContent","item","xs","ThemeProvider","theme","Slider","value","onChange","event","defaultValue","step","min","max","valueLabelDisplay","changeTooltip","initCo2Data","useEffect","maxCo2","useMemo","x","Math","getMaxCo2","colorScale","scalePow","exponent","domain","range","projectionConfig","scale","width","height","length","geography","geographies","geo","emmisionsData","values","find","properties","ISO_A3","fill","onMouseEnter","onMouseLeave","style","default","outline","hover","pressed","rsmKey","content","cement_co2","coal_co2","flaring_co2","gas_co2","oil_co2","other_industry_co2","co2_growth_abs","co2_growth_prct","population","gdp","chartData","source","tonnes","contents","fontWeight","toLocaleString","point","round","className","padding","YearSlider","ReactDOM","render","store","createStore","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.44f5583a.chunk.js","sourcesContent":["const constants = {\n    WORLD_ISO: \"OWID_WRL\",\n    START_YEAR: 1990,\n    END_YEAR: 2018,\n}\n\nexport default constants;","import constants from \"../constants\";\n\nconst yearReducer = (selectedYear = constants.START_YEAR, action) => {\n    if (action.type === \"CHANGE_YEAR\") {\n        return action.payload;\n    }\n    return selectedYear;\n}\n\nexport default yearReducer;","import constants from '../constants';\nimport owidCo2Data from '../data/owid-co2-data.json';\n\nconst co2MapDataReducer = (existingCo2Data = null, action) => {\n    if (action.type === \"INIT_CO2_DATA\" && !existingCo2Data) {\n        const co2Data = Object.keys(owidCo2Data).map(country => {\n            const countryData = owidCo2Data[country];\n            const transformedCountryData =  {\n                name: country,\n                iso_code: countryData.iso_code,\n            }\n            countryData.data && countryData.data.forEach(yearlyData => {\n                const year = yearlyData.year\n                if (year >= constants.START_YEAR && year <= constants.END_YEAR) {\n                    transformedCountryData[year] = yearlyData.co2;\n                }\n            })\n            return transformedCountryData;\n        })\n        return co2Data;\n    } else {\n        return existingCo2Data;\n    }\n\n}\n\nexport default co2MapDataReducer","const tooltipReducer = (tooltipContent = null, action) => {\n    if (action.type === \"SET_TOOLTIP_CONTENT\") {\n        if (!action.payload) {\n            return \"\";\n        } else {\n            return action.payload;\n        }\n        \n    }\n    return tooltipContent;\n}\n\nexport default tooltipReducer;","import { combineReducers } from \"redux\";\nimport yearReducer from \"./yearReducer\";\nimport co2MapDataReducer from \"./co2MapDataReducer\";\nimport tooltipReducer from \"./tooltipReducer\"\n\nexport default combineReducers({\n    selectedYear: yearReducer,\n    co2Data: co2MapDataReducer,\n    tooltipContent: tooltipReducer\n})","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst AppTitle = (props) => {\n    return (\n        <h1>CO2 Emissions By Year: {props.year}</h1>\n    )\n}\n\nconst mapStateToProps = (state) => {\n   return {\n        year: state.selectedYear\n    }\n}\n\nexport default connect(mapStateToProps)(AppTitle); ","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nimport { createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport constants from \"../constants\";\nimport { changeYear } from \"../actions\";\n\nconst yearSlider = ({year, changeYear}) => {\n\n    const muiTheme = createTheme({\n        overrides:{\n            MuiSlider: {\n                thumb:{\n                    color: \"#ff5533\",\n                },\n                track: {\n                    color: \"#ff5533\"\n                },\n                rail: {\n                    color: \"#ff5533\"\n                }\n          }\n      }\n      });\n\n    return (\n        <Grid container spacing={2} justifyContent=\"center\">\n            <Grid item>{constants.START_YEAR}</Grid>\n            <Grid item xs={3}>\n                <ThemeProvider theme={muiTheme}>\n                    <Slider \n                        value={year}\n                        onChange={(event, year) => {changeYear(year)}}\n                        defaultValue={constants.START_YEAR}\n                        aria-labelledby=\"discrete-slider-small-steps\"\n                        step={1}\n                        min={constants.START_YEAR}\n                        max={constants.END_YEAR}\n                        valueLabelDisplay=\"auto\"\n                    />\n                </ThemeProvider>\n            </Grid>\n            <Grid item>{constants.END_YEAR}</Grid>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = (state) => {\n   return {\n        year: state.selectedYear\n    }\n}\n\nexport default connect(mapStateToProps, {changeYear})(yearSlider); ","export const changeYear = year => {\n    return {\n        type: \"CHANGE_YEAR\",\n        payload: year\n    };\n};\n\nexport const changeTooltip = tooltipContent => {\n    return {\n        type: \"SET_TOOLTIP_CONTENT\",\n        payload: tooltipContent\n    };\n};\n\nexport const initCo2Data = () => {\n    return {\n        type: \"INIT_CO2_DATA\",\n    };\n};","import { useEffect, useMemo } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport { scalePow } from \"d3-scale\";\nimport { changeTooltip, initCo2Data } from \"../actions\";\nimport constants from \"../constants\"\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\n\nconst WorldMap = ({year, co2Data, changeTooltip, initCo2Data}) => {\n\n    useEffect(() => {\n        initCo2Data()\n    }, [initCo2Data])    \n\n    const maxCo2 = useMemo(() => {\n        const getMaxCo2 = (co2Data) => {\n            let maxCo2 = 0;\n            co2Data && co2Data.forEach(countryData => {\n                if (countryData.iso_code && countryData.iso_code !== constants.WORLD_ISO) { //only use country data, exclue continent, world data\n                    for (let x = constants.START_YEAR; x <= constants.END_YEAR; x++) {\n                        if (countryData[x]) {\n                            maxCo2 = Math.max(maxCo2 , countryData[x]);\n                        }\n                    }\n                }\n            })\n            return maxCo2;\n        }\n        return getMaxCo2(co2Data)\n    }, [co2Data])\n\n\n    // use a power scale with exponent 0.4 to minimize the amount that data is obfuscated as the max value is somewhat of an outlier\n    const colorScale = scalePow()\n        .exponent(0.4)\n        .domain([0, maxCo2])\n        .range([\"#ffedea\", \"#ff5533\"]);\n\n    return (\n        <ComposableMap \n            data-tip=\"\"\n            projectionConfig={{\n                scale: 150,\n            }}\n            width={800}\n            height={400}\n        >\n            {co2Data && co2Data.length > 0 && (\n                <Geographies \n                    geography={geoUrl}\n                >\n                {({ geographies }) =>\n                    geographies.map((geo) => {\n                    const emmisionsData = Object.values(co2Data).find((countryData) => {\n                        return countryData.iso_code === geo.properties.ISO_A3\n                    });\n                    return (\n                        <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            fill={emmisionsData && emmisionsData[year] ? colorScale(emmisionsData[year]) : \"#000000\"}\n                            onMouseEnter={() => {\n                                changeTooltip({\n                                    name: emmisionsData?.name,\n                                });\n                            }}\n                            onMouseLeave={() => {\n                                changeTooltip(null);\n                            }}\n                            style={{\n                                default: {\n                                    outline: \"none\",\n                                },\n                                hover: {\n                                    outline: \"none\"\n                                },\n                                pressed: {\n                                    outline: \"none\",\n                                },\n                            }}\n                        />\n                    );\n                    })\n                }\n                </Geographies>\n            )}\n        </ComposableMap>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n         co2Data: state.co2Data,\n         year: state.selectedYear,\n     }\n }\n \nexport default connect(mapStateToProps, {changeTooltip, initCo2Data})(WorldMap); \n","import React from \"react\";\nimport ReactTooltip from 'react-tooltip';\nimport { connect } from \"react-redux\";\n\nimport owidCo2Data from '../data/owid-co2-data.json';\n\nconst Tooltip = ({content, year}) => {\n    if (!content || !content.name) {\n        return \"\";\n    }\n    const countryData = owidCo2Data[content.name]?.data?.find(yearlyData => yearlyData.year === year) || {};\n\n    const {\n        co2,\n        cement_co2,\n        coal_co2,\n        flaring_co2,\n        gas_co2,\n        oil_co2,\n        other_industry_co2,\n        co2_growth_abs,\n        co2_growth_prct,\n        population,\n        gdp,\n    } = countryData;\n\n    const chartData = [\n        { source: 'Cement', tonnes: cement_co2 || 0 },\n        { source: 'Coal', tonnes: coal_co2 || 0 },\n        { source: 'Flaring', tonnes: flaring_co2 || 0 },\n        { source: 'Gas', tonnes: gas_co2 || 0 },\n        { source: 'Oil', tonnes: oil_co2 || 0 },\n        { source: 'Other', tonnes: other_industry_co2 || 0 },\n      ];\n    const contents = (\n        <div>\n            <h2>{content.name}: {year}</h2>\n            <div>\n                <span style={{fontWeight: 'bold'}}>\n                    Population:&nbsp;\n                </span>\n                {population?.toLocaleString() || 'N/A'}\n            </div>\n            <div>\n                <span style={{fontWeight: 'bold'}}>\n                    GDP:&nbsp;\n                </span>\n                {gdp?.toLocaleString() || 'N/A'}\n            </div>\n            <div>\n                <span style={{fontWeight: 'bold'}}>\n                    CO2 Emmitted(tonnes):&nbsp;\n                </span>\n                {co2 ? co2.toLocaleString() : \"N/A\"}\n                {co2_growth_abs && (\n                    <span style={{color: co2_growth_abs >= 0 ? \"green\" : \"red\"}}>\n                        {co2_growth_abs >= 0 ? \"⬆\" : \"⬇\"}{co2_growth_abs} ({co2_growth_prct}%)\n                    </span>\n                )}\n            </div>\n            {co2 && (\n                <>\n                <h4>Breakdown of CO2 Emissions</h4>\n                <div>\n                    {chartData.map(point => {\n                        return (\n                            <div>\n                                <span style={{fontWeight: 'bold'}}>\n                                    {point.source}:&nbsp;\n                                </span>\n                                 {point.tonnes} ({Math.round((point.tonnes / co2) * 1000) /  10}%)\n                            </div>\n                        )\n                    })}\n                </div>\n                </>\n            )}\n        </div>\n    )\n\n    return (\n        <ReactTooltip>{contents}</ReactTooltip>\n    )\n}\n\nconst mapStateToProps = (state) => {\n   return {\n        content: state.tooltipContent,\n        year: state.selectedYear,\n    }\n}\n\nexport default connect(mapStateToProps)(Tooltip); ","import React from 'react'\nimport { connect } from 'react-redux';\nimport AppTitle from './AppTitle';\nimport YearSlider from './YearSlider';\nimport WorldMap from './WorldMap';\nimport Tooltip from './Tooltip';\nimport '../css/App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <AppTitle />\n      <div style={{padding: \"10px 0px\"}}>\n        <YearSlider />\n      </div>\n      <div>\n        <WorldMap />\n        <Tooltip />\n      </div>\n    </div>\n  );\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n       co2Data: state.co2Data,\n       year: state.selectedYear,\n\n   }\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from './reducers'\nimport App from './components/App';\nimport './css/index.css';\n\nReactDOM.render(\n  <Provider store={createStore(reducers)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}